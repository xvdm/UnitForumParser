// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Services;

#nullable disable

namespace Services.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240620164515_RemovedIsActiveField")]
    partial class RemovedIsActiveField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Services.Entities.Logs.LogChannel", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("LogGuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LogGuildId");

                    b.ToTable("LogChannels");
                });

            modelBuilder.Entity("Services.Entities.Logs.LogCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("LogChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("LogUserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("LogChannelId");

                    b.HasIndex("LogUserId");

                    b.ToTable("LogCommands");
                });

            modelBuilder.Entity("Services.Entities.Logs.LogGuild", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogGuilds");
                });

            modelBuilder.Entity("Services.Entities.Logs.LogGuildUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("GuildNickname")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LogGuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("LogUserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("LogGuildId");

                    b.HasIndex("LogUserId");

                    b.ToTable("LogGuildUsers");
                });

            modelBuilder.Entity("Services.Entities.Logs.LogUser", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("GlobalName")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogUsers");
                });

            modelBuilder.Entity("Services.Entities.Logs.LogChannel", b =>
                {
                    b.HasOne("Services.Entities.Logs.LogGuild", "LogGuild")
                        .WithMany("LogChannels")
                        .HasForeignKey("LogGuildId");

                    b.Navigation("LogGuild");
                });

            modelBuilder.Entity("Services.Entities.Logs.LogCommand", b =>
                {
                    b.HasOne("Services.Entities.Logs.LogChannel", "LogChannel")
                        .WithMany("LogCommands")
                        .HasForeignKey("LogChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Services.Entities.Logs.LogUser", "LogUser")
                        .WithMany("LogCommands")
                        .HasForeignKey("LogUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogChannel");

                    b.Navigation("LogUser");
                });

            modelBuilder.Entity("Services.Entities.Logs.LogGuildUser", b =>
                {
                    b.HasOne("Services.Entities.Logs.LogGuild", "LogGuild")
                        .WithMany("LogGuildUsers")
                        .HasForeignKey("LogGuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Services.Entities.Logs.LogUser", "LogUser")
                        .WithMany("LogGuildUsers")
                        .HasForeignKey("LogUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogGuild");

                    b.Navigation("LogUser");
                });

            modelBuilder.Entity("Services.Entities.Logs.LogChannel", b =>
                {
                    b.Navigation("LogCommands");
                });

            modelBuilder.Entity("Services.Entities.Logs.LogGuild", b =>
                {
                    b.Navigation("LogChannels");

                    b.Navigation("LogGuildUsers");
                });

            modelBuilder.Entity("Services.Entities.Logs.LogUser", b =>
                {
                    b.Navigation("LogCommands");

                    b.Navigation("LogGuildUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
